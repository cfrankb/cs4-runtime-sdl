def get_pair(line):
    pair = []
    for e in line.split(' '):
        e = e.strip()
        if not e:
            continue
        if e[0] == '#':
            break
        pair.append(e)
    return pair

def main():
    defines = ['//////////////////////////////////////////////////',
               '// autogenerated',
               '#include <stdint.h>'
               '',
               '#pragma once',
               ''
               ]
    defines.append('''typedef struct
{
    uint8_t flags;
    uint8_t type;
    uint8_t score;
    int8_t health;
    uint8_t speed;
    uint8_t ai;
    bool hidden;
    const char * basename;
} tiledef_t;\n''')

    data = [
        '//////////////////////////////////////////////////',
        '// autogenerated',
        '',
        '#include "tilesdata.h"',
        '',
        'const tiledef_t tiledef[] = {'
    ]

    types = {}
    lines = []
    with open ('tiles.ini') as sfile:
        lines = sfile.read().split('\n')

    section = None
    line_num = 0
    i = 0
    for line in lines:
        line_num += 1
        line = line.strip().replace('\t', ' ')
        if not line:
            continue
        if line[0] == '#':
            continue

        if line[0] == '[':
            if section:
                defines.append('')
            section = line[1:-1]
            defines.append(f'// {section}')
            i = 0
            continue

        if section:
            pair = get_pair(line)
            if not pair:
                continue
            def_name = pair[0].upper()
            def_name_raw = def_name
            prefix = def_name[0:len(section)]
            if prefix.upper() != section.upper():
                def_name = f'{section.upper()}_{def_name}'
            if len(pair) > 1:
                i = int(pair[1], 16)
            if section == 'type':
                types[def_name_raw] = 0
            val = int(pair[1],16) if len(pair) >1 else i
            c = line.split('#',1)
            name = c[1].strip() if len(c) > 1 else ''
            defines.append(f'#define {def_name:32} 0x{val:0>2x}' + (f' // {name}' if name else ''))
            if section == 'tiles':
                score = 0
                hp = 0
                if len(pair) > 3:
                    for j in range(3, len(pair)):
                        #print(j, len(pair))
                        if pair[j][0] == '+':
                           hp = int(pair[j][1:])
                        elif pair[j][0] == '-':
                           hp = int(pair[j])
                        elif pair[j][0] == '$':
                           score = int(pair[j][1:])
                if len(pair) > 2:
                    type_name = pair[2]
                    if type_name not in types:
                        print(f'type_name {type_name} on line {line_num} not found')
                    else:
                       item_def = f'''{{0x00, TYPE_{type_name}, {score}, {hp}, 0, 0, false, "{name}"}}, '''
                       data.append(f'''     {item_def:70} // {val:0>2x} {def_name}''')
                else:
                    print(f'no type defined on line {line_num}')

            i += 1
        else:
            print(f'value no in section on line {line_num}')

    with open('../../src/tilesdata.h', 'w') as tfile:
        tfile.write('\n'.join(defines))

    with open('../../src/tilesdata.cpp', 'w') as tfile:
        data.append('};')
        tfile.write('\n'.join(data))

main()
